using Content.Shared._FTL.PowerControl;
using Content.Shared.Gravity;
using Content.Shared.Lathe;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client._FTL.PowerControl;

[GenerateTypedNameReferences]
public sealed partial class PowerControlWindow : FancyWindow
{
    private readonly ButtonGroup _buttonGroup = new();
    private readonly PowerControlBoundUserInterface _owner;
    private readonly IEntityManager _entityManager;

    public PowerControlWindow(PowerControlBoundUserInterface ui, EntityUid entity)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        Title = Loc.GetString("power-control-computer-title");
        _entityManager = IoCManager.Resolve<IEntityManager>();
        _owner = ui;
    }

    public void UpdateState(PowerControlState state)
    {
        Apcs.RemoveAllChildren();
        foreach (var area in state.Areas)
        {
            var button = new Button
            {
                Text = Loc.GetString("power-control-computer-button-text", ("enabled", area.Enabled), ("name", area.Name))
            };
            button.OnPressed += args =>
            {
                _owner.ToggleApc(area.Entity);
            };
            Apcs.AddChild(button);
        }
    }
}
